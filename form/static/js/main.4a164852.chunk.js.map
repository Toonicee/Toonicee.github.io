{"version":3,"sources":["components/input-type-text/input-type-text.jsx","components/input-type-text/index.js","components/input-type-password/input-type-password.jsx","components/input-type-password/index.js","components/input-type-number/index.js","components/input-type-number/input-type-number.jsx","components/input-type-checkbox/index.js","components/input-type-checkbox/input-type-checkbox.jsx","components/signup-form/signup-form.jsx","components/signup-form/index.js","components/result-registration/result-registration.jsx","components/result-registration/index.js","components/app/app.jsx","components/app/index.js","serviceWorker.js","index.jsx"],"names":["InputTypeText","type","name","placeholder","children","Item","htmlFor","id","defaultProps","InputTypePassword","Password","InputTypeNumber","style","display","flexDirection","min","InputTypeCheckbox","validation","Yup","shape","max","required","password","test","value","repeatPassword","this","parent","email","website","url","age","positive","integer","acceptTerms","val","SignupForm","props","addSkills","state","skill","skills","setState","chahgeSkill","target","removeSkill","index","updateSkills","filter","onSubmit","values","setSubmitting","resetForm","setErrors","successfulRegistration","data","console","log","axios","post","then","catch","error","request","status","errors","response","message","initialValues","validationSchema","RowSkill","onChange","onClick","disabled","map","SkillItem","key","BtnClose","DeleteTwoTone","RowBtn","React","Component","styled","div","button","ResultRegistration","success","WrapperResult","icon","CheckCircleTwoTone","twoToneColor","title","extra","App","bool","Main","FormWrapper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4WAIMA,EAAgB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAChD,OACE,kBAAC,IAAKC,KAAN,CAAWH,KAAMA,GACf,2BAAOI,QAASJ,GAAOE,GACvB,kBAAC,IAAD,CAAOG,GAAIL,EAAMD,KAAMA,EAAMC,KAAMA,EAAMC,YAAaA,MAK5DH,EAAcQ,aAAe,CAC3BP,KAAM,OACNE,YAAa,IASAH,ICtBAA,EDsBAA,EEpBTS,EAAoB,SAAC,GAAqC,IAAnCP,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC9C,OACE,kBAAC,IAAKC,KAAN,CAAWH,KAAMA,GACf,2BAAOI,QAASJ,GAAOE,GACvB,kBAAC,IAAMM,SAAP,CAAgBH,GAAIL,EAAMA,KAAMA,EAAMC,YAAaA,MAKzDM,EAAkBD,aAAe,CAC/BL,YAAa,IASAM,ICrBAA,EDqBAA,E,SErBAE,ECES,SAAC,GAAwB,IAAtBT,EAAqB,EAArBA,KAAME,EAAe,EAAfA,SAC/B,OACE,kBAAC,IAAKC,KAAN,CAAWH,KAAMA,GACf,2BACEI,QAASJ,EACTU,MAAO,CACLC,QAAS,OACTC,cAAe,WAGhBV,GAEH,kBAAC,IAAD,CAAaW,IAAK,GAAIR,GAAIL,EAAMA,KAAMA,M,SCd7Bc,ECEW,SAAC,GAAwB,IAAtBd,EAAqB,EAArBA,KAAME,EAAe,EAAfA,SACjC,OACE,kBAAC,IAAKC,KAAN,CAAWH,KAAMA,GACf,kBAAC,IAAD,CAAUA,KAAMA,GAAOE,K,olCCQ7B,IAAMa,EAAaC,MAAaC,MAAM,CACpCjB,KAAMgB,MACHE,IAAI,GAAI,iCACRC,SAAS,YACZC,SAAUJ,MACPH,IAAI,EAAG,gCACPK,IAAI,GAAI,iCACRG,KACC,OACA,8EACA,SAAAC,GAAK,MAAI,oCAAoCD,KAAKC,MAEnDH,SAAS,YACZI,eAAgBP,MACbK,KAAK,kBAAmB,2BAA2B,SAASC,GAC3D,OAAOE,KAAKC,OAAOL,WAAaE,KAEjCH,SAAS,YACZO,MAAOV,MACJU,MAAM,yBACNP,SAAS,YACZQ,QAASX,MAAaY,MACtBC,IAAKb,MACFE,IAAI,GAAI,gCACRY,WACAC,UACAZ,SAAS,YACZa,YAAahB,MACVK,KAAK,MAAO,mBAAmB,SAAAY,GAAG,OAAY,IAARA,KACtCd,SAAS,cAGRe,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,UAAY,WAAO,IAAD,EACU,EAAKC,MAAvBC,EADQ,EACRA,MAAOC,EADC,EACDA,OACf,EAAKC,SAAS,CACZD,OAAO,GAAD,mBAAMA,GAAN,CAAcD,IACpBA,MAAO,MAZQ,EAgBnBG,YAAc,YAAiB,IAAdC,EAAa,EAAbA,OACf,EAAKF,SAAS,CAAEF,MAAOI,EAAOpB,SAjBb,EAoBnBqB,YAAc,SAAAC,GAAK,OAAI,WAAO,IAEtBC,EADa,EAAKR,MAAhBE,OACoBO,QAAO,SAACR,EAAOjC,GAAR,OAAeA,IAAOuC,KACzD,EAAKJ,SAAS,CAAED,OAAQM,MAvBP,EA0BnBE,SAAW,SAACC,EAAD,GAAsD,IAA3CC,EAA0C,EAA1CA,cAAeC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACtCC,EAA2B,EAAKjB,MAAhCiB,uBACAb,EAAW,EAAKF,MAAhBE,OAFsD,iBAG9BS,EAH8B,CAGtBT,WAAtBc,GAH4C,EAGtDf,MAHsD,0BAK9DgB,QAAQC,IAAIP,GACZQ,IACGC,KAHY,gCAGCJ,GACbK,MAAK,WACJT,GAAc,GACdG,GAAuB,GACvBF,OAEDS,OAAM,SAAAC,GAEL,GADAX,GAAc,GACe,MAAzBW,EAAMC,QAAQC,OAAgB,CAAC,IACzBC,EAAWH,EAAMI,SAASX,KAA1BU,OACRZ,EAAUY,QAEVE,IAAQL,MAAMA,EAAMK,aA3C1B,EAAK5B,MAAQ,CACXE,OAAQ,GACRD,MAAO,IAJQ,E,sEAkDT,IAAD,SACmBd,KAAKa,MAAvBE,EADD,EACCA,OAAQD,EADT,EACSA,MAChB,OACE,kBAAC,IAAD,CACE4B,cAAe,CACblE,KAAM,GACNoB,SAAU,GACVG,eAAgB,GAChBG,MAAO,GACPC,QAAS,GACTE,IAAK,GACLG,aAAa,GAEfmC,iBAAkBpD,EAClBgC,SAAUvB,KAAKuB,UAEf,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAe/C,KAAK,OAAOC,YAAY,mBAAvC,aAGA,kBAAC,EAAD,CAAeF,KAAK,QAAQC,KAAK,QAAQC,YAAY,wBAArD,cAGA,kBAAC,EAAD,CAAmBD,KAAK,WAAWC,YAAY,kBAA/C,iBAGA,kBAAC,EAAD,CAAmBD,KAAK,iBAAiBC,YAAY,0BAArD,oBAGA,kBAAC,EAAD,CAAiBD,KAAK,OAAtB,YACA,kBAAC,EAAD,CAAeA,KAAK,UAAUC,YAAY,4BAA1C,WAGA,kBAAC,IAAKE,KAAN,CAAWH,KAAK,SACd,8CACA,kBAACoE,EAAD,KACE,kBAAC,IAAD,CAAO/D,GAAG,QAAQiB,MAAOgB,EAAO+B,SAAU7C,KAAKiB,cAC/C,kBAAC,IAAD,CAAQ1C,KAAK,UAAUuE,QAAS9C,KAAKY,UAAWmC,SAAoB,KAAVjC,GAA1D,cAIDC,EAAOiC,KAAI,SAAClD,EAAOsB,GAAR,OACV,kBAAC6B,EAAD,CAAWC,IAAKpD,GACbA,EACD,kBAACqD,EAAD,CAAUL,QAAS,EAAK3B,YAAYC,IAClC,kBAACgC,EAAA,EAAD,YAKR,kBAAC,EAAD,CAAmB5E,KAAK,eAAxB,gBACA,kBAAC6E,EAAD,KACE,kBAAC,IAAD,eACA,kBAAC,IAAD,CAAaP,QAAS,kBAAM,EAAK9B,SAAS,CAAED,OAAQ,OAApD,gB,GAxGauC,IAAMC,WAoHzBN,EAAYO,IAAOC,IAAV,KAiBTN,EAAWK,IAAOE,OAAV,KAkBRd,EAAWY,IAAOC,IAAV,KAMRJ,EAASG,IAAOC,IAAV,KC1MG/C,EDgNAA,E,6KE5Mf,IAAMiD,EAAqB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAAShC,EAA6B,EAA7BA,uBACrC,OACE,kBAACiC,EAAD,CAAeD,QAASA,GACtB,kBAAC,IAAD,CACEE,KAAM,kBAACC,EAAA,EAAD,CAAoBC,aAAa,YACvCC,MAAM,mCACNC,MACE,kBAAC,IAAD,CAAQpB,QAAS,kBAAMlB,GAAuB,IAAQrD,KAAK,WAA3D,YASVoF,EAAmB7E,aAAe,CAChC8E,SAAS,GAQX,IAAMC,EAAgBL,IAAOC,IAAV,KAEN,SAAA9C,GAAK,OAAKA,EAAMiD,QAAU,QAAU,UC/BlCD,EDoCAA,E,2XE7BTQ,G,YACJ,WAAYxD,GAAQ,IAAD,8BACjB,4CAAMA,KAMRiB,uBAAyB,SAAAwC,GACvB,EAAKpD,SAAS,CAAE4C,QAASQ,KANzB,EAAKvD,MAAQ,CACX+C,SAAS,GAHM,E,sEAWT,IACAA,EAAY5D,KAAKa,MAAjB+C,QACR,OACE,kBAACS,GAAD,KACE,kBAACC,GAAD,CAAaV,QAASA,GACpB,kBAAC,EAAD,CAAYhC,uBAAwB5B,KAAK4B,0BAE3C,kBAAC,EAAD,CACEgC,QAASA,EACThC,uBAAwB5B,KAAK4B,8B,GArBrB0B,IAAMC,WA4BlBc,GAAOb,IAAOC,IAAV,MAMJa,GAAcd,IAAOC,IAAV,KAGJ,SAAA9C,GAAK,OAAKA,EAAMiD,QAAU,GAAM,KC5C9BO,GDkDAA,GExCKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdjD,OAAM,SAAAC,GACLN,QAAQM,MAAMA,EAAMK,c","file":"static/js/main.4a164852.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input } from 'formik-antd';\r\n\r\nconst InputTypeText = ({ type, name, placeholder, children }) => {\r\n  return (\r\n    <Form.Item name={name}>\r\n      <label htmlFor={name}>{children}</label>\r\n      <Input id={name} type={type} name={name} placeholder={placeholder} />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nInputTypeText.defaultProps = {\r\n  type: 'text',\r\n  placeholder: '',\r\n};\r\n\r\nInputTypeText.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n  type: PropTypes.string,\r\n};\r\nexport default InputTypeText;\r\n","import InputTypeText from './input-type-text';\r\n\r\nexport default InputTypeText;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input } from 'formik-antd';\r\n\r\nconst InputTypePassword = ({ name, placeholder, children }) => {\r\n  return (\r\n    <Form.Item name={name}>\r\n      <label htmlFor={name}>{children}</label>\r\n      <Input.Password id={name} name={name} placeholder={placeholder} />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nInputTypePassword.defaultProps = {\r\n  placeholder: '',\r\n};\r\n\r\nInputTypePassword.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default InputTypePassword;\r\n","import InputTypePassword from './input-type-password';\r\n\r\nexport default InputTypePassword;\r\n","import InputTypeNumber from './input-type-number';\r\n\r\nexport default InputTypeNumber;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, InputNumber } from 'formik-antd';\r\n\r\nconst InputTypeNumber = ({ name, children }) => {\r\n  return (\r\n    <Form.Item name={name}>\r\n      <label\r\n        htmlFor={name}\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        {children}\r\n      </label>\r\n      <InputNumber min={18} id={name} name={name} />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nInputTypeNumber.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default InputTypeNumber;\r\n","import InputTypeCheckbox from './input-type-checkbox';\r\n\r\nexport default InputTypeCheckbox;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Checkbox } from 'formik-antd';\r\n\r\nconst InputTypeCheckbox = ({ name, children }) => {\r\n  return (\r\n    <Form.Item name={name}>\r\n      <Checkbox name={name}>{children}</Checkbox>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nInputTypeCheckbox.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n};\r\nexport default InputTypeCheckbox;\r\n","import React from 'react';\r\nimport { Form, Input, SubmitButton, ResetButton } from 'formik-antd';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { Button, message } from 'antd';\r\nimport { DeleteTwoTone } from '@ant-design/icons';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport InputTypeText from '../input-type-text';\r\nimport InputTypePassword from '../input-type-password';\r\nimport InputTypeNumber from '../input-type-number';\r\nimport InputTypeCheckbox from '../input-type-checkbox';\r\n\r\nconst validation = Yup.object().shape({\r\n  name: Yup.string()\r\n    .max(50, 'Must be 50 characters or less')\r\n    .required('Required'),\r\n  password: Yup.string()\r\n    .min(8, 'Must be 8 characters or more')\r\n    .max(40, 'Must be 40 characters or less')\r\n    .test(\r\n      'pass',\r\n      'Latin letters and numbers only, at least one number and one capital letter',\r\n      value => /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])/.test(value)\r\n    )\r\n    .required('Required'),\r\n  repeatPassword: Yup.string()\r\n    .test('passwords-match', 'Password does not match', function(value) {\r\n      return this.parent.password === value;\r\n    })\r\n    .required('Required'),\r\n  email: Yup.string()\r\n    .email('Invalid email address')\r\n    .required('Required'),\r\n  website: Yup.string().url(),\r\n  age: Yup.number()\r\n    .max(65, 'you must be no older than 65')\r\n    .positive()\r\n    .integer()\r\n    .required('Required'),\r\n  acceptTerms: Yup.boolean()\r\n    .test('age', 'Confirm actions', val => val === true)\r\n    .required('Required'),\r\n});\r\n\r\nclass SignupForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      skills: [],\r\n      skill: '',\r\n    };\r\n  }\r\n\r\n  addSkills = () => {\r\n    const { skill, skills } = this.state;\r\n    this.setState({\r\n      skills: [...skills, skill],\r\n      skill: '',\r\n    });\r\n  };\r\n\r\n  chahgeSkill = ({ target }) => {\r\n    this.setState({ skill: target.value });\r\n  };\r\n\r\n  removeSkill = index => () => {\r\n    const { skills } = this.state;\r\n    const updateSkills = skills.filter((skill, id) => id !== index);\r\n    this.setState({ skills: updateSkills });\r\n  };\r\n\r\n  onSubmit = (values, { setSubmitting, resetForm, setErrors }) => {\r\n    const { successfulRegistration } = this.props;\r\n    const { skills } = this.state;\r\n    const { skill, ...data } = { ...values, skills };\r\n    const appURL = 'http://localhost:5000/sing-up';\r\n    console.log(values);\r\n    axios\r\n      .post(appURL, data)\r\n      .then(() => {\r\n        setSubmitting(false);\r\n        successfulRegistration(true);\r\n        resetForm();\r\n      })\r\n      .catch(error => {\r\n        setSubmitting(false);\r\n        if (error.request.status === 422) {\r\n          const { errors } = error.response.data;\r\n          setErrors(errors);\r\n        } else {\r\n          message.error(error.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { skills, skill } = this.state;\r\n    return (\r\n      <Formik\r\n        initialValues={{\r\n          name: '',\r\n          password: '',\r\n          repeatPassword: '',\r\n          email: '',\r\n          website: '',\r\n          age: '',\r\n          acceptTerms: false,\r\n        }}\r\n        validationSchema={validation}\r\n        onSubmit={this.onSubmit}\r\n      >\r\n        <Form>\r\n          <InputTypeText name=\"name\" placeholder=\"Enter your name\">\r\n            Your name\r\n          </InputTypeText>\r\n          <InputTypeText type=\"email\" name=\"email\" placeholder=\"your-email@email.com\">\r\n            Your email\r\n          </InputTypeText>\r\n          <InputTypePassword name=\"password\" placeholder=\"Enter password\">\r\n            Your password\r\n          </InputTypePassword>\r\n          <InputTypePassword name=\"repeatPassword\" placeholder=\"Enter confirm password\">\r\n            Confirm password\r\n          </InputTypePassword>\r\n          <InputTypeNumber name=\"age\">Your age</InputTypeNumber>\r\n          <InputTypeText name=\"website\" placeholder=\"https://your-website.com\">\r\n            Website\r\n          </InputTypeText>\r\n          <Form.Item name=\"skill\">\r\n            <label>Your skills</label>\r\n            <RowSkill>\r\n              <Input id=\"skill\" value={skill} onChange={this.chahgeSkill} />\r\n              <Button type=\"primary\" onClick={this.addSkills} disabled={skill === ''}>\r\n                add skill\r\n              </Button>\r\n            </RowSkill>\r\n            {skills.map((value, index) => (\r\n              <SkillItem key={value}>\r\n                {value}\r\n                <BtnClose onClick={this.removeSkill(index)}>\r\n                  <DeleteTwoTone />\r\n                </BtnClose>\r\n              </SkillItem>\r\n            ))}\r\n          </Form.Item>\r\n          <InputTypeCheckbox name=\"acceptTerms\">accept terms</InputTypeCheckbox>\r\n          <RowBtn>\r\n            <SubmitButton>Submit</SubmitButton>\r\n            <ResetButton onClick={() => this.setState({ skills: [] })}>Reset</ResetButton>\r\n          </RowBtn>\r\n        </Form>\r\n      </Formik>\r\n    );\r\n  }\r\n}\r\n\r\nSignupForm.propTypes = {\r\n  successfulRegistration: PropTypes.func.isRequired,\r\n};\r\n\r\nconst SkillItem = styled.div`\r\n  color: rgba(0, 0, 0, 0.87);\r\n  margin: 4px;\r\n  padding: 0 30px 0 12px;\r\n  height: 30px;\r\n  display: inline-flex;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  border-radius: 16px;\r\n  vertical-align: middle;\r\n  justify-content: center;\r\n  text-decoration: none;\r\n  border: 1px solid #e0e0e0;\r\n`;\r\n\r\nconst BtnClose = styled.button`\r\n  width: 0;\r\n  right: 22px;\r\n  top: -6px;\r\n  z-index: 100;\r\n  position: absolute;\r\n  padding: 0;\r\n  cursor: pointer;\r\n  border: none;\r\n  height: 0;\r\n  fill: currentColor;\r\n  display: inline-block;\r\n  font-size: 1rem;\r\n  transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  flex-shrink: 0;\r\n  user-select: none;\r\n`;\r\n\r\nconst RowSkill = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 65% 30%;\r\n  grid-column-gap: 5%;\r\n`;\r\n\r\nconst RowBtn = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 25% 25%;\r\n  grid-column-gap: 30px;\r\n`;\r\n\r\nexport default SignupForm;\r\n","import SignupForm from './signup-form';\r\n\r\nexport default SignupForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Result } from 'antd';\r\nimport { CheckCircleTwoTone } from '@ant-design/icons';\r\n\r\nconst ResultRegistration = ({ success, successfulRegistration }) => {\r\n  return (\r\n    <WrapperResult success={success}>\r\n      <Result\r\n        icon={<CheckCircleTwoTone twoToneColor=\"#52c41a\" />}\r\n        title=\"You are successfully registered!\"\r\n        extra={\r\n          <Button onClick={() => successfulRegistration(false)} type=\"primary\">\r\n            Next\r\n          </Button>\r\n        }\r\n      />\r\n    </WrapperResult>\r\n  );\r\n};\r\n\r\nResultRegistration.defaultProps = {\r\n  success: false,\r\n};\r\n\r\nResultRegistration.propTypes = {\r\n  successfulRegistration: PropTypes.func.isRequired,\r\n  success: PropTypes.bool,\r\n};\r\n\r\nconst WrapperResult = styled.div`\r\n  position: absolute;\r\n  display: ${props => (props.success ? 'block' : 'none')};\r\n  z-index: 100;\r\n  background-color: #fff;\r\n`;\r\n\r\nexport default ResultRegistration;\r\n","import ResultRegistration from './result-registration';\r\n\r\nexport default ResultRegistration;\r\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport SignupForm from '../signup-form';\nimport ResultRegistration from '../result-registration';\n\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      success: false,\n    };\n  }\n\n  successfulRegistration = bool => {\n    this.setState({ success: bool });\n  };\n\n  render() {\n    const { success } = this.state;\n    return (\n      <Main>\n        <FormWrapper success={success}>\n          <SignupForm successfulRegistration={this.successfulRegistration} />\n        </FormWrapper>\n        <ResultRegistration\n          success={success}\n          successfulRegistration={this.successfulRegistration}\n        />\n      </Main>\n    );\n  }\n}\n\nconst Main = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FormWrapper = styled.div`\n  min-width: 30%;\n  padding: 2%;\n  opacity: ${props => (props.success ? 0.3 : 1)};\n  border-radius: 5px;\n  margin: 50px 0;\n  box-shadow: 0px 0px 26px 4px rgba(0, 0, 0, 0.31);\n`;\n\nexport default App;\n","import App from './app';\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}