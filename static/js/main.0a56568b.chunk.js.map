{"version":3,"sources":["servisec/servisec.js","redux/reducers/auth.js","redux/reducers/article.js","redux/reducers/index.js","redux/store.js","components/Block/Block.jsx","components/Block/index.js","helper/displayStatus.js","components/Input-type-password/Input-type-password.jsx","components/Input-type-password/index.js","components/Input-type-text/Input-type-text.jsx","components/Input-type-text/index.js","components/Input-type-textarea/Input-type-textarea.jsx","components/Add-post/index.js","components/Add-post/Add-post.jsx","components/Button/Button.jsx","components/Container/Container.jsx","components/Article-item/Article-item.jsx","redux/actions/article.js","components/List-pagination/List-pagination.jsx","modules/Post-form/Post-form.jsx","redux/actions/auth.js","modules/Header/Header.jsx","modules/Signup-form/Signup-form.jsx","modules/Login-form/Login-form.jsx","modules/Article/Article.jsx","pages/Auth/Auth.jsx","pages/Home/Home.jsx","pages/Create-Post/Create-Post.jsx","components/App/App.jsx","serviceWorker.js","index.jsx"],"names":["axios","defaults","baseURL","getAll","page","get","count","p","limit","current","register","body","post","login","token","headers","common","Authorization","initialState","currentUser","error","isAutoUser","isSuccess","auth","state","action","type","payload","user","inicialState","articles","isProgres","article","articlesCount","console","log","currentPage","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","next","localStorage","setItem","servisec","Block","children","backcolor","BlockStyle","className","defaultProps","styled","div","props","displayStatus","key","touched","InputTypePassword","name","placeholder","size","useField","meta","Item","hasFeedback","validateStatus","htmlFor","Password","prefix","LockOutlined","id","InputTypeText","icon","validating","status","InputTypeTextArea","TextArea","AddPost","to","Button","ContainerWrapper","Container","WrapperArticle","ArticleBody","ArticleHeader","ArticleItem","href","src","author","image","alt","username","Date","createdAt","toDateString","title","downloadProgress","progress","articleLoaded","dispatch","then","res","articleData","data","mapDispatchToProps","onSetPage","getAllArticles","ListPagination","onChange","value","setPage","total","connect","WrapperForm","WrapperButton","initialValues","description","content","tags","onSubmit","setUserDataFailure","err","onLogout","HeaderWrapper","onClick","validata","Yup","shape","max","required","password","min","test","repeatPassword","this","parent","email","newUserRegistration","values","userData","catch","errors","response","validationSchema","setSubmitting","resetForm","setErrors","setTimeout","block","validation","onLogin","WrapperPagination","map","slug","exact","path","component","LoginForm","SignupForm","Wrapper","getAllArticle","onLoad","setUserDataSuccess","App","getItem","Home","Auth","CreatePost","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0a56568b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://conduit.productionready.io/api/';\r\n\r\nconst getToken = token => {\r\n  if (token) {\r\n    axios.defaults.headers.common.Authorization = `Token ${token}`;\r\n  }\r\n};\r\n\r\nconst Auth = {\r\n  current: () => axios.get('/user'),\r\n  register: body => axios.post('/users', body),\r\n  login: body => axios.post('/users/login', body),\r\n};\r\n\r\nconst limit = (count, p = 0) => `limit=${count}&offset=${p ? p * count : 0}`;\r\nconst Article = {\r\n  getAll: page => axios.get(`/articles?${limit(10, page)}`),\r\n};\r\n\r\nexport default {\r\n  Article,\r\n  Auth,\r\n  getToken,\r\n};\r\n","const initialState = {\r\n  currentUser: {},\r\n  error: null,\r\n  isAutoUser: null,\r\n  isSuccess: false,\r\n};\r\n\r\nconst auth = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n    case 'REGISTER':\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload.user,\r\n        isAutoUser: true,\r\n      };\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        currentUser: {},\r\n        isAutoUser: false,\r\n      };\r\n    case 'SET_USER_DATA_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isAutoUser: true,\r\n        currentUser: action.payload.user,\r\n      };\r\n    case 'SET_USER_DATA_FAILURE':\r\n      return {\r\n        ...state,\r\n        isAutoUser: false,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default auth;\r\n","const inicialState = {\r\n  articles: [],\r\n  isProgres: false,\r\n};\r\n\r\nconst article = (state = inicialState, action) => {\r\n  switch (action.type) {\r\n    case 'ARTICLE_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        articles: action.payload.articles,\r\n        articlesCount: action.payload.articlesCount,\r\n      };\r\n    }\r\n    case 'SET_PAGE':\r\n      console.log(action);\r\n      return {\r\n        ...state,\r\n        currentPage: action.payload,\r\n      };\r\n    case 'DOWNLOAD_PROGRESS':\r\n      return {\r\n        ...state,\r\n        isProgres: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default article;\r\n","import { combineReducers } from 'redux';\r\nimport auth from './auth';\r\nimport article from './article';\r\n\r\nexport default combineReducers({ auth, article });\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport servisec from '../servisec/servisec';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst localStorageMiddleware = () => next => action => {\r\n  if (action.type === 'REGISTER' || action.type === 'LOGIN') {\r\n    if (!action.error) {\r\n      localStorage.setItem('jwt', action.payload.user.token);\r\n      servisec.getToken(action.payload.user.token);\r\n    }\r\n  } else if (action.type === 'LOGOUT') {\r\n    window.localStorage.setItem('jwt', '');\r\n    servisec.getToken(null);\r\n  }\r\n  next(action);\r\n};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk, localStorageMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Block = ({ children, backcolor }) => (\r\n  <BlockStyle backcolor={backcolor} className=\"block\">\r\n    {children}\r\n  </BlockStyle>\r\n);\r\n\r\nBlock.defaultProps = {\r\n  backcolor: '',\r\n};\r\n\r\nBlock.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  backcolor: PropTypes.string,\r\n};\r\n\r\nconst BlockStyle = styled.div`\r\n  padding: 45px;\r\n  background-color: ${props => props.backcolor};\r\n  box-shadow: 0px 0px 25px rgba(0, 0, 0, 0.04204);\r\n  border-radius: 3px;\r\n`;\r\n\r\nexport default Block;\r\n","import Block from './Block';\r\n\r\nexport default Block;\r\n","const displayStatus = key => {\r\n  if (key.touched && key.error) {\r\n    return 'error';\r\n  }\r\n  if (!key.touched) {\r\n    return '';\r\n  }\r\n  return 'success';\r\n};\r\n\r\nexport default displayStatus;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input } from 'formik-antd';\r\nimport { LockOutlined } from '@ant-design/icons';\r\nimport { useField } from 'formik';\r\n\r\nimport displayStatus from '../../helper/displayStatus';\r\n\r\nconst InputTypePassword = ({ name, placeholder, children, size }) => {\r\n  const [, meta] = useField(name);\r\n\r\n  return (\r\n    <Form.Item name={name} hasFeedback validateStatus={displayStatus(meta)}>\r\n      <label htmlFor={name}>{children}</label>\r\n      <Input.Password\r\n        prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n        size={size}\r\n        id={name}\r\n        name={name}\r\n        placeholder={placeholder}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nInputTypePassword.defaultProps = {\r\n  placeholder: '',\r\n  children: null,\r\n  size: 'default',\r\n};\r\n\r\nInputTypePassword.propTypes = {\r\n  children: PropTypes.node,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n  size: PropTypes.string,\r\n};\r\n\r\nexport default InputTypePassword;\r\n","import InputTypePassword from './Input-type-password';\r\n\r\nexport default InputTypePassword;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input } from 'formik-antd';\r\nimport { useField } from 'formik';\r\nimport { Icon } from 'antd';\r\n\r\nimport displayStatus from '../../helper/displayStatus';\r\n\r\nconst InputTypeText = ({ name, children, placeholder, type, icon, size, validating }) => {\r\n  const [, meta] = useField(name);\r\n  const status = validating ? displayStatus(meta) : null;\r\n  return (\r\n    <Form.Item name={name} hasFeedback validateStatus={status}>\r\n      <label htmlFor={name}>{children}</label>\r\n      <Input\r\n        prefix={<Icon type={icon} />}\r\n        size={size}\r\n        id={name}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nInputTypeText.defaultProps = {\r\n  type: 'text',\r\n  placeholder: '',\r\n  children: null,\r\n  size: 'default',\r\n  icon: 'none',\r\n  validating: true,\r\n};\r\n\r\nInputTypeText.propTypes = {\r\n  children: PropTypes.node,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n  size: PropTypes.string,\r\n  type: PropTypes.string,\r\n  icon: PropTypes.string,\r\n  validating: PropTypes.bool,\r\n};\r\nexport default InputTypeText;\r\n","import InputTypeText from './Input-type-text';\r\n\r\nexport default InputTypeText;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input } from 'formik-antd';\r\n\r\nconst InputTypeTextArea = ({ name, children, placeholder }) => {\r\n  return (\r\n    <Form.Item name={name}>\r\n      <label htmlFor={name}>{children}</label>\r\n      <Input.TextArea\r\n        id={name}\r\n        // autoSize={{ minRows: 3, maxRows: 7 }}\r\n        name={name}\r\n        placeholder={placeholder}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nInputTypeTextArea.defaultProps = {\r\n  placeholder: '',\r\n  children: null,\r\n};\r\n\r\nInputTypeTextArea.propTypes = {\r\n  children: PropTypes.node,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default InputTypeTextArea;\r\n","import AddPost from './Add-post';\r\n\r\nexport default AddPost;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst AddPost = props => {\r\n  return <Link to=\"/add\">Добавить новый пост</Link>;\r\n};\r\n\r\nexport default AddPost;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button as ButtonMain } from 'antd';\r\n\r\nconst Button = ({ children, type }) => <ButtonMain type={type}>{children}</ButtonMain>;\r\n\r\nButton.defaultProps = {\r\n  type: '',\r\n};\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Container = ({ children }) => <ContainerWrapper>{children}</ContainerWrapper>;\r\n\r\nconst ContainerWrapper = styled.div`\r\n  width: 90%;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ArticleItem = ({ article }) => {\r\n  return (\r\n    <WrapperArticle>\r\n      <ArticleHeader>\r\n        <div>\r\n          <a href=\"#\">\r\n            <div>\r\n              <img\r\n                className=\"article__image\"\r\n                src={article.author.image}\r\n                alt={article.author.username}\r\n              />\r\n            </div>\r\n          </a>\r\n        </div>\r\n        <div>\r\n          <a href=\"#\">{article.author.username}</a>\r\n          <span>{new Date(article.createdAt).toDateString()}</span>\r\n        </div>\r\n      </ArticleHeader>\r\n      <ArticleBody>\r\n        <div>\r\n          <h3>{article.title}</h3>\r\n        </div>\r\n      </ArticleBody>\r\n    </WrapperArticle>\r\n  );\r\n};\r\n\r\nArticleItem.propTypes = {\r\n  article: PropTypes.node.isRequired,\r\n};\r\n\r\nconst WrapperArticle = styled.div`\r\n  margin: 20px 0;\r\n\r\n  .article__image {\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n`;\r\n\r\nconst ArticleBody = styled.div``;\r\n\r\nconst ArticleHeader = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport default ArticleItem;\r\n","import servisec from '../../servisec/servisec';\r\n\r\nconst articleSuccess = body => ({\r\n  type: 'ARTICLE_SUCCESS',\r\n  payload: body,\r\n});\r\nconst downloadProgress = progress => {\r\n  return {\r\n    type: 'DOWNLOAD_PROGRESS',\r\n    payload: progress,\r\n  };\r\n};\r\n\r\nconst setPage = page => ({\r\n  type: 'SET_PAGE',\r\n  payload: page,\r\n});\r\n\r\nconst articleLoaded = page => dispatch => {\r\n  servisec.Article.getAll(page).then(res => {\r\n    const articleData = res.data;\r\n    dispatch(articleSuccess(articleData));\r\n    dispatch(downloadProgress(true));\r\n  });\r\n};\r\n\r\nexport { articleLoaded, setPage, downloadProgress };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Pagination } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { setPage, articleLoaded } from '../../redux/actions/article';\r\n\r\nconst mapStateToProps = ({ article }) => ({\r\n  articles: article.articles,\r\n  articlesCount: article.articlesCount,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onSetPage: setPage,\r\n  getAllArticles: articleLoaded,\r\n};\r\n\r\nconst ListPagination = ({ onSetPage, getAllArticles, articlesCount }) => {\r\n  if (articlesCount <= 10) {\r\n    return null;\r\n  }\r\n\r\n  const setPage = value => {\r\n    onSetPage(value * 10, getAllArticles(value));\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <Pagination onChange={value => setPage(value)} total={articlesCount} />\r\n    </nav>\r\n  );\r\n};\r\n\r\nListPagination.defaultProps = {\r\n  articlesCount: 0,\r\n};\r\n\r\nListPagination.propTypes = {\r\n  onSetPage: PropTypes.func.isRequired,\r\n  getAllArticles: PropTypes.func.isRequired,\r\n  articlesCount: PropTypes.number,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListPagination);\r\n","import React from 'react';\r\nimport { Form, SubmitButton } from 'formik-antd';\r\nimport { Formik } from 'formik';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { InputTypeText, InputTypeTextArea } from '../../components';\r\n\r\nconst mapStateToProps = state => ({ state });\r\n\r\nconst PostForm = props => {\r\n  console.log(props);\r\n  return (\r\n    <WrapperForm>\r\n      <Formik\r\n        initialValues={{\r\n          title: '',\r\n          description: '',\r\n          content: '',\r\n          tags: '',\r\n        }}\r\n        onSubmit={() => console.log('OK')}\r\n      >\r\n        <Form>\r\n          <InputTypeText type=\"text\" name=\"title\" placeholder=\"title\" validating={false} />\r\n          <InputTypeText\r\n            type=\"text\"\r\n            name=\"description\"\r\n            placeholder=\"description\"\r\n            validating={false}\r\n          />\r\n          <InputTypeTextArea name=\"content\" placeholder=\"content\" />\r\n          <InputTypeText type=\"text\" name=\"tags\" placeholder=\"tags\" validating={false} />\r\n          <WrapperButton>\r\n            <SubmitButton size=\"large\">Опубликовать</SubmitButton>\r\n          </WrapperButton>\r\n        </Form>\r\n      </Formik>\r\n    </WrapperForm>\r\n  );\r\n};\r\n\r\nconst WrapperForm = styled.div`\r\n  width: 50%;\r\n  max-width: 700px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst WrapperButton = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default connect(mapStateToProps)(PostForm);\r\n","import servisec from '../../servisec/servisec';\r\n\r\nconst registration = user => {\r\n  return {\r\n    type: 'REGISTER',\r\n    payload: user,\r\n  };\r\n};\r\n\r\nconst login = user => {\r\n  return {\r\n    type: 'LOGIN',\r\n    payload: user,\r\n  };\r\n};\r\n\r\nconst setUserDataSuccess = user => {\r\n  return {\r\n    type: 'SET_USER_DATA_SUCCESS',\r\n    payload: user,\r\n  };\r\n};\r\n\r\nconst setUserDataFailure = err => {\r\n  return {\r\n    type: 'SET_USER_DATA_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n\r\nconst logout = () => {\r\n  return {\r\n    type: 'LOGOUT',\r\n  };\r\n};\r\n\r\nconst setUserData = () => dispatch => {\r\n  servisec.Auth.current()\r\n    .then(res => {\r\n      const user = res.data;\r\n      dispatch(setUserDataSuccess(user));\r\n    })\r\n    .catch(error => {\r\n      dispatch(setUserDataFailure(error));\r\n    });\r\n};\r\n\r\nconst loginUser = values => dispatch => {\r\n  servisec.Auth.login({\r\n    user: {\r\n      email: values.email,\r\n      password: values.password,\r\n    },\r\n  })\r\n    .then(res => {\r\n      const userData = res.data.user;\r\n      dispatch(login({ user: userData }));\r\n    })\r\n    .catch(error => {\r\n      const { errors } = error.response.data;\r\n      setUserDataFailure(errors);\r\n    });\r\n};\r\n\r\nconst newUserRegistration = values => dispatch => {\r\n  servisec.Auth.register({\r\n    user: {\r\n      username: values.username,\r\n      email: values.email,\r\n      password: values.password,\r\n    },\r\n  })\r\n    .then(res => {\r\n      const userData = res.data.user;\r\n      dispatch(registration({ user: userData }));\r\n    })\r\n    .catch(error => {\r\n      const { errors } = error.response.data;\r\n      dispatch(setUserDataFailure(errors));\r\n    });\r\n};\r\n\r\nexport { newUserRegistration, loginUser, logout, setUserData };\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Button } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { logout } from '../../redux/actions/auth';\r\nimport { AddPost, Container } from '../../components';\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n  currentUser: auth.currentUser,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: logout,\r\n};\r\n\r\nconst Header = ({ onLogout, currentUser: { username } }) => {\r\n  return (\r\n    <HeaderWrapper>\r\n      <Container>\r\n        <div>\r\n          <h1>{username}</h1>\r\n          <AddPost />\r\n        </div>\r\n        <div>\r\n          <Button onClick={onLogout}>выход</Button>\r\n        </div>\r\n      </Container>\r\n    </HeaderWrapper>\r\n  );\r\n};\r\n\r\nconst HeaderWrapper = styled.div`\r\n  background: #eee;\r\n  padding: 30px 0;\r\n\r\n  > div {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from 'react';\r\nimport { Form, SubmitButton } from 'formik-antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Block, InputTypePassword, InputTypeText } from '../../components';\r\nimport { newUserRegistration } from '../../redux/actions/auth';\r\n\r\nconst validata = Yup.object().shape({\r\n  username: Yup.string()\r\n    .max(50, 'Имя должно содержать не более 50 символов')\r\n    .required('Введите ваше имя'),\r\n  password: Yup.string()\r\n    .min(8, 'Должно быть 8 символов или более')\r\n    .max(40, 'Должно быть не более 40 символов')\r\n    .test(\r\n      'pass',\r\n      'Только латинские буквы и цифры, хотя бы одна цифра и одна заглавная буква',\r\n      value => /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])/.test(value)\r\n    )\r\n    .required('Введите пароль'),\r\n  repeatPassword: Yup.string()\r\n    .test('passwords-match', 'Пароли не совподают', function(value) {\r\n      return this.parent.password === value;\r\n    })\r\n    .required('Required'),\r\n  email: Yup.string()\r\n    .email('Введите коректные E-mail')\r\n    .required('Введите ваш E-mail'),\r\n});\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n  error: auth.error,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  newUserRegistration,\r\n};\r\n\r\nconst SignupForm = ({ newUserRegistration, error }) => {\r\n  const onSubmit = (values, { setSubmitting, resetForm, setErrors }) => {\r\n    newUserRegistration(values);\r\n    resetForm();\r\n    setSubmitting(false);\r\n    setTimeout(4, () => setErrors(error));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2 className=\"auth__title\">Регистрация</h2>\r\n        <p className=\"auth__text\">Для входа, вам нужно зарегистрироваться</p>\r\n      </div>\r\n      <Block backcolor=\"#fff\">\r\n        <Formik\r\n          initialValues={{\r\n            username: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n            email: '',\r\n          }}\r\n          validationSchema={validata}\r\n          onSubmit={onSubmit}\r\n        >\r\n          <Form>\r\n            <InputTypeText type=\"mail\" name=\"email\" placeholder=\"E-Mail\" icon=\"mail\" size=\"large\" />\r\n            <InputTypeText name=\"username\" placeholder=\"Ваше имя\" icon=\"user\" size=\"large\" />\r\n            <InputTypePassword name=\"password\" placeholder=\"Пароль\" />\r\n            <InputTypePassword name=\"repeatPassword\" placeholder=\"Повторите пароль\" size=\"large\" />\r\n            <div>\r\n              <SubmitButton size=\"large\" block>\r\n                Зарегистрироваться\r\n              </SubmitButton>\r\n            </div>\r\n            <div className=\"form__link\">\r\n              <Link to=\"/login\">Войти в аккаунт</Link>\r\n            </div>\r\n          </Form>\r\n        </Formik>\r\n      </Block>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, SubmitButton } from 'formik-antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Block, InputTypePassword, InputTypeText } from '../../components';\r\nimport { loginUser } from '../../redux/actions/auth';\r\n\r\nconst validation = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(8, 'Must be 8 characters or more')\r\n    .max(40, 'Must be 40 characters or less')\r\n    .test(\r\n      'pass',\r\n      'Latin letters and numbers only, at least one number and one capital letter',\r\n      value => /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])/.test(value)\r\n    )\r\n    .required('Required'),\r\n  email: Yup.string()\r\n    .email('Введите коректные E-mail')\r\n    .required('Введите ваш E-mail'),\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser: state.currentUser,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogin: loginUser,\r\n};\r\n\r\nconst LoginForm = props => {\r\n  console.log(props);\r\n  const onSubmit = (values, { setSubmitting, setErrors }) => {\r\n    props.onLogin(values, setSubmitting, setErrors);\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2 className=\"auth__title\">Войти в аккаунт</h2>\r\n        <p className=\"auth__text\">Пожалуйста, войдите в свой аккаунт</p>\r\n      </div>\r\n      <Block backcolor=\"#fff\">\r\n        <Formik\r\n          initialValues={{\r\n            password: '',\r\n            email: '',\r\n          }}\r\n          validationSchema={validation}\r\n          onSubmit={onSubmit}\r\n        >\r\n          <Form>\r\n            <InputTypeText\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"E-mail\"\r\n              icon=\"mail\"\r\n              size=\"large\"\r\n            />\r\n            <InputTypePassword name=\"password\" placeholder=\"Пароль\" size=\"large\" />\r\n            <div>\r\n              <SubmitButton size=\"large\" block>\r\n                Войти в аккаунт\r\n              </SubmitButton>\r\n            </div>\r\n            <div className=\"form__link\">\r\n              <Link to=\"/signup\">Зарегистрироваться</Link>\r\n            </div>\r\n          </Form>\r\n        </Formik>\r\n      </Block>\r\n    </>\r\n  );\r\n};\r\n\r\nLoginForm.propTypes = {\r\n  onLogin: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { articleLoaded, downloadProgress } from '../../redux/actions/article';\r\nimport { ArticleItem, ListPagination, Container } from '../../components';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    articles: state.article.articles,\r\n    currentPage: state.article.currentPage,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  articleLoaded,\r\n  downloadProgress,\r\n};\r\n\r\nconst Article = ({ articles }) => {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {articles.map(article => {\r\n          return <ArticleItem article={article} key={article.slug} />;\r\n        })}\r\n        <WrapperPagination>\r\n          <ListPagination />\r\n        </WrapperPagination>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WrapperPagination = styled.div`\r\n  margin: 50px 0;\r\n`;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { LoginForm, SignupForm } from '../../modules';\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n  isAutoUser: auth.isAutoUser,\r\n});\r\n\r\nconst Auth = ({ isAutoUser }) => {\r\n  if (isAutoUser) return <Redirect to=\"/home\" />;\r\n  return (\r\n    <WrapperForm>\r\n      <>\r\n        <Route exact path=\"/login\" component={LoginForm} />\r\n        <Route exact path=\"/signup\" component={SignupForm} />\r\n      </>\r\n    </WrapperForm>\r\n  );\r\n};\r\n\r\nconst WrapperForm = styled.div`\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #202002;\r\n\r\n  .block {\r\n    width: 100%;\r\n    max-width: 28%;\r\n  }\r\n\r\n  .auth__title {\r\n    font-size: 28px;\r\n    line-height: 33px;\r\n    margin-bottom: 5px;\r\n  }\r\n  .form__link {\r\n    margin-top: 30px;\r\n\r\n    a {\r\n      font-size: 16px;\r\n      line-height: 19px;\r\n      color: #adadad;\r\n\r\n      &:hover {\r\n        color: #1890ff;\r\n      }\r\n      &:focus {\r\n        color: #1890ff;\r\n      }\r\n      &:active {\r\n        color: #1890ff;\r\n      }\r\n    }\r\n  }\r\n\r\n  .auth__text {\r\n    opacity: 0.5;\r\n    font-weight: 300;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n  }\r\n  .btn {\r\n    width: 200px;\r\n    height: 200px;\r\n    background: #000;\r\n  }\r\n  .btn-2 {\r\n    background: red;\r\n  }\r\n`;\r\n\r\nexport default connect(mapStateToProps)(Auth);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Header, Article } from '../../modules';\r\n\r\nconst mapStateToProps = state => ({\r\n  isAutoUser: state.auth.isAutoUser,\r\n  isProgres: state.article.isProgres,\r\n});\r\n\r\nconst Home = ({ isAutoUser, isProgres }) => {\r\n  console.log(isProgres);\r\n  if (!isAutoUser) return <Redirect to=\"/login\" />;\r\n  return (\r\n    <>\r\n      <Header />\r\n      {isProgres ? <Article /> : <div>Загрузка</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { PostForm, Header } from '../../modules';\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n  isAutoUser: auth.isAutoUser,\r\n});\r\n\r\nconst CreatePost = ({ isAutoUser }) => {\r\n  if (!isAutoUser) return <Redirect to=\"/login\" />;\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Wrapper>\r\n        <PostForm />\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 50px 0;\r\n`;\r\n\r\nexport default connect(mapStateToProps)(CreatePost);\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Home, Auth, CreatePost } from '../../pages';\nimport servisec from '../../servisec/servisec';\nimport { setUserData } from '../../redux/actions/auth';\nimport { articleLoaded } from '../../redux/actions/article';\n\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\n\nconst mapStateToProps = state => {\n  return {\n    isAutoUser: state.auth.isAutoUser,\n    articles: state.article.articles,\n    currentPage: state.article.currentPage,\n  };\n};\n\nconst mapDispatchToProps = {\n  getAllArticle: articleLoaded,\n  onLoad: setUserData,\n};\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { getAllArticle, onLoad, currentPage } = this.props;\n    const token = window.localStorage.getItem('jwt');\n    if (token) {\n      servisec.getToken(token);\n    }\n    getAllArticle(currentPage);\n    onLoad();\n  }\n\n  render() {\n    return (\n      <>\n        <Switch>\n          <Route exact path={['/', '/home']} component={Home} />\n          <Route exact path={['/login', '/signup']} component={Auth} />\n          <Route exact path=\"/add\" component={CreatePost} />\n        </Switch>\n      </>\n    );\n  }\n}\n\nApp.defaultProps = {\n  currentPage: 0,\n};\n\nApp.propTypes = {\n  getAllArticle: PropTypes.func.isRequired,\n  onLoad: PropTypes.func.isRequired,\n  currentPage: PropTypes.number,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}